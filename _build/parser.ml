type token =
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | NEG
  | ASSIGN
  | MODULO
  | EQ
  | NEQ
  | GT
  | GEQ
  | LT
  | LEQ
  | AND
  | OR
  | NOT
  | DEF
  | LBRACE
  | RBRACE
  | NEWLINE
  | RETURN
  | IF
  | ELIF
  | ELSE
  | WHILE
  | FOR
  | STRING
  | INT
  | FLOAT
  | BOOL
  | VOID
  | ARRAY
  | COLON
  | COMMA
  | ILIT of (int)
  | FLIT of (float)
  | BLIT of (bool)
  | SLIT of (string)
  | ID of (string)
  | EOF
  | NoOp

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACKET *);
  260 (* RBRACKET *);
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIVIDE *);
  265 (* NEG *);
  266 (* ASSIGN *);
  267 (* MODULO *);
  268 (* EQ *);
  269 (* NEQ *);
  270 (* GT *);
  271 (* GEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* AND *);
  275 (* OR *);
  276 (* NOT *);
  277 (* DEF *);
  278 (* LBRACE *);
  279 (* RBRACE *);
  280 (* NEWLINE *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELIF *);
  284 (* ELSE *);
  285 (* WHILE *);
  286 (* FOR *);
  287 (* STRING *);
  288 (* INT *);
  289 (* FLOAT *);
  290 (* BOOL *);
  291 (* VOID *);
  292 (* ARRAY *);
  293 (* COLON *);
  294 (* COMMA *);
    0 (* EOF *);
  300 (* NoOp *);
    0|]

let yytransl_block = [|
  295 (* ILIT *);
  296 (* FLIT *);
  297 (* BLIT *);
  298 (* SLIT *);
  299 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\008\000\008\000\005\000\005\000\005\000\005\000\005\000\005\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\007\000\007\000\003\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\013\000\013\000\013\000\
\011\000\011\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\003\000\004\000\001\000\005\000\007\000\005\000\002\000\
\000\000\002\000\005\000\001\000\001\000\001\000\001\000\001\000\
\003\000\004\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\001\000\003\000\000\000\001\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\014\000\011\000\013\000\012\000\
\015\000\061\000\000\000\000\000\000\000\000\000\000\000\005\000\
\001\000\003\000\004\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\029\000\031\000\030\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\009\000\000\000\000\000\
\036\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\040\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\034\000\000\000\035\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\006\000\026\000\017\000\
\000\000\018\000\000\000\000\000\019\000\000\000\000\000\000\000\
\023\000\000\000\022\000"

let yydgoto = "\002\000\
\010\000\011\000\100\000\013\000\034\000\038\000\102\000\039\000\
\103\000\104\000\069\000\036\000\042\000\070\000"

let yysindex = "\014\000\
\076\255\000\000\233\255\076\255\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\076\255\076\255\238\254\056\255\000\000\
\000\000\000\000\000\000\000\000\247\254\019\255\042\255\233\255\
\042\255\042\255\042\255\042\255\000\000\000\000\000\000\000\000\
\137\255\018\255\143\000\000\000\112\255\049\255\239\254\198\000\
\128\000\051\255\000\000\000\000\042\255\042\255\042\255\042\255\
\042\255\042\255\042\255\042\255\042\255\042\255\042\255\042\255\
\042\255\042\255\042\255\042\255\000\000\000\000\035\255\233\255\
\000\000\042\255\000\000\011\001\057\255\031\255\011\001\216\000\
\145\255\145\255\000\000\000\000\000\000\053\001\053\001\108\255\
\108\255\108\255\108\255\040\001\026\001\046\255\115\255\000\000\
\000\000\042\255\000\000\143\255\000\000\011\001\143\255\143\255\
\042\255\079\255\097\255\000\000\013\255\089\255\143\255\163\000\
\104\255\000\000\178\000\042\255\042\255\000\000\000\000\000\000\
\113\255\000\000\234\000\252\000\000\000\143\255\143\255\129\255\
\000\000\143\255\000\000"

let yyrindex = "\000\000\
\136\000\000\000\000\000\136\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\136\000\136\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\255\
\000\000\155\255\000\000\000\000\000\000\000\000\000\000\000\000\
\185\255\000\000\000\000\000\000\000\000\000\000\158\255\000\000\
\157\255\000\000\000\000\000\000\160\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\155\255\000\000\008\255\000\000\164\255\020\255\000\000\
\212\255\239\255\000\000\000\000\000\000\048\255\091\000\001\000\
\028\000\046\000\073\000\094\000\126\255\000\000\000\000\000\000\
\000\000\000\000\000\000\147\255\000\000\015\255\147\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\147\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\255\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\075\000\092\000\000\000\255\255\000\000\166\255\000\000\
\202\255\237\255\000\000\000\000\105\000\000\000"

let yytablesize = 582
let yytable = "\014\000\
\023\000\015\000\014\000\035\000\105\000\040\000\041\000\043\000\
\044\000\059\000\014\000\014\000\111\000\047\000\001\000\017\000\
\060\000\020\000\047\000\024\000\064\000\033\000\037\000\033\000\
\021\000\068\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\106\000\025\000\033\000\026\000\059\000\041\000\027\000\
\020\000\041\000\063\000\041\000\060\000\020\000\067\000\021\000\
\086\000\033\000\089\000\041\000\041\000\028\000\087\000\120\000\
\121\000\041\000\041\000\123\000\090\000\092\000\094\000\041\000\
\005\000\006\000\007\000\008\000\009\000\107\000\016\000\108\000\
\029\000\030\000\031\000\032\000\033\000\041\000\018\000\019\000\
\115\000\116\000\101\000\020\000\012\000\101\000\101\000\012\000\
\003\000\109\000\022\000\004\000\021\000\101\000\021\000\012\000\
\012\000\021\000\005\000\006\000\007\000\008\000\009\000\110\000\
\048\000\049\000\050\000\051\000\101\000\101\000\052\000\021\000\
\101\000\021\000\021\000\021\000\021\000\021\000\113\000\048\000\
\021\000\048\000\021\000\021\000\021\000\021\000\021\000\002\000\
\117\000\045\000\021\000\021\000\021\000\021\000\021\000\025\000\
\048\000\026\000\046\000\020\000\027\000\048\000\020\000\050\000\
\051\000\007\000\062\000\052\000\122\000\093\000\054\000\008\000\
\055\000\057\000\028\000\048\000\095\000\058\000\096\000\097\000\
\098\000\025\000\088\000\099\000\000\000\005\000\006\000\007\000\
\008\000\009\000\000\000\000\000\000\000\029\000\030\000\031\000\
\032\000\033\000\032\000\000\000\032\000\032\000\032\000\032\000\
\032\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\037\000\000\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\032\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\038\000\000\000\038\000\038\000\038\000\000\000\000\000\000\000\
\000\000\037\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\043\000\000\000\043\000\000\000\038\000\005\000\
\006\000\007\000\008\000\009\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\038\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\045\000\
\000\000\045\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\044\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\046\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\042\000\000\000\042\000\047\000\
\046\000\047\000\000\000\000\000\000\000\000\000\042\000\042\000\
\000\000\000\000\000\000\000\000\042\000\042\000\046\000\047\000\
\047\000\000\000\042\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\000\000\047\000\048\000\049\000\050\000\051\000\
\000\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\048\000\049\000\050\000\051\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\000\000\066\000\061\000\048\000\
\049\000\050\000\051\000\000\000\000\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\048\000\049\000\
\050\000\051\000\112\000\000\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\065\000\
\000\000\114\000\048\000\049\000\050\000\051\000\000\000\000\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\091\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\118\000\000\000\000\000\048\000\049\000\
\050\000\051\000\000\000\000\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\119\000\000\000\000\000\
\048\000\049\000\050\000\051\000\000\000\000\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\048\000\
\049\000\050\000\051\000\000\000\000\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\048\000\049\000\
\050\000\051\000\000\000\000\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\048\000\049\000\050\000\051\000\
\000\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\048\000\049\000\050\000\051\000\000\000\000\000\052\000\
\000\000\000\000\055\000\056\000\057\000\058\000"

let yycheck = "\001\000\
\010\001\003\000\004\000\023\000\095\000\025\000\026\000\027\000\
\028\000\002\001\012\000\013\000\103\000\001\001\001\000\000\000\
\002\001\036\001\001\001\001\001\038\001\002\001\024\000\004\001\
\043\001\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\096\000\001\001\024\001\003\001\038\001\066\000\006\001\
\036\001\002\001\002\001\004\001\038\001\036\001\004\001\043\001\
\022\001\038\001\002\001\012\001\013\001\020\001\064\000\118\000\
\119\000\018\001\019\001\122\000\038\001\024\001\090\000\024\001\
\031\001\032\001\033\001\034\001\035\001\097\000\004\000\001\001\
\039\001\040\001\041\001\042\001\043\001\038\001\012\000\013\000\
\108\000\109\000\092\000\036\001\001\000\095\000\096\000\004\000\
\021\001\001\001\043\001\024\001\001\001\103\000\003\001\012\000\
\013\000\006\001\031\001\032\001\033\001\034\001\035\001\023\001\
\005\001\006\001\007\001\008\001\118\000\119\000\011\001\020\001\
\122\000\022\001\023\001\024\001\025\001\026\001\023\001\002\001\
\029\001\004\001\031\001\032\001\033\001\034\001\035\001\000\000\
\024\001\001\001\039\001\040\001\041\001\042\001\043\001\001\001\
\019\001\003\001\010\001\036\001\006\001\024\001\036\001\007\001\
\008\001\002\001\043\001\011\001\028\001\043\001\004\001\002\001\
\004\001\002\001\020\001\038\001\022\001\002\001\024\001\025\001\
\026\001\023\001\066\000\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\038\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\038\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\002\001\255\255\004\001\255\255\024\001\031\001\
\032\001\033\001\034\001\035\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\038\001\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\002\001\
\255\255\004\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\038\001\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\002\001\255\255\004\001\002\001\
\024\001\004\001\255\255\255\255\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\038\001\018\001\
\019\001\255\255\024\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\255\255\255\255\038\001\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\005\001\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\038\001\024\001\005\001\
\006\001\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\005\001\006\001\
\007\001\008\001\024\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\002\001\
\255\255\024\001\005\001\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\002\001\255\255\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\002\001\255\255\255\255\005\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\002\001\255\255\255\255\
\005\001\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\005\001\
\006\001\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\005\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\005\001\006\001\007\001\008\001\255\255\255\255\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  NEG\000\
  ASSIGN\000\
  MODULO\000\
  EQ\000\
  NEQ\000\
  GT\000\
  GEQ\000\
  LT\000\
  LEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  DEF\000\
  LBRACE\000\
  RBRACE\000\
  NEWLINE\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  ARRAY\000\
  COLON\000\
  COMMA\000\
  EOF\000\
  NoOp\000\
  "

let yynames_block = "\
  ILIT\000\
  FLIT\000\
  BLIT\000\
  SLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 396 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                 ( ([], []) )
# 402 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 40 "parser.mly"
                ( ((_1 :: fst _2), snd _2) )
# 410 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 42 "parser.mly"
               ( (fst _2, (_1 :: snd _2)) )
# 418 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 43 "parser.mly"
                 ( (fst _2, snd _2) )
# 425 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
  (
      print_endline "function";
    {
      rtyp = _2;
      fname = _3;
      formals = _5;
      body = _9;
    }
  )
# 443 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                  ( [] )
# 449 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 59 "parser.mly"
                  ( _1 )
# 456 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                             ( [(_1, _2)] )
# 464 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                             ( (_3, _4) :: _1 )
# 473 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
        ( Int )
# 479 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
         ( Bool )
# 485 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          ( Float )
# 491 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
           ( print_endline "typ string" ;String )
# 497 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
         ( Void )
# 503 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
              ( print_endline "typ array" ; ArrayTyp _1 )
# 510 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                 ( Expr _1 )
# 517 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                        ( Return _2 )
# 524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 77 "parser.mly"
                                    ( Block _2 )
# 531 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 78 "parser.mly"
           ( DecAssn _1 )
# 538 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 546 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                         ( If(_3, _5, _7) )
# 555 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                  ( While(_3, _5) )
# 563 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                 ( _2 )
# 570 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                   ( [] )
# 576 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 86 "parser.mly"
                   ( _1 :: _2 )
# 584 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                               ( print_endline "global assign";((_1, _2), _4) )
# 593 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                     ( print_endline ("int "^(string_of_int _1));IntLit(_1) )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 93 "parser.mly"
                     ( FloatLit(_1) )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( print_endline ("string "^_1);StringLit(_1) )
# 614 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 95 "parser.mly"
                     ( print_endline ("bool "^(string_of_bool _1));BoolLit(_1) )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                     ( Id(_1) )
# 628 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Assign(_1, _3) )
# 636 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 98 "parser.mly"
                              ( Call(_1, _3) )
# 644 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                           ( Cast(_1, _3) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                       ( _2 )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                   ( Binop (_1, Add, _3) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                    ( Binop (_1, Sub, _3) )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                    ( Binop (_1, Mul, _3) )
# 683 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop (_1, Div, _3) )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                 ( Binop (_1, Equal, _3) )
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                  ( Binop (_1, Neq, _3) )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                 ( Binop (_1, Greater, _3) )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                  ( Binop (_1, Geq, _3) )
# 723 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                 ( Binop (_1, Less, _3) )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                  ( Binop (_1, Leq, _3) )
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                  ( Binop (_1, And, _3) )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                 ( Binop (_1, Or, _3) )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                         ( Unop(Neg, _2) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
             ( Unop(Not, _2) )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop (_1, Mod, _3) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr) in
    Obj.repr(
# 116 "parser.mly"
        ( print_endline "array"; _1 )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arr_elems) in
    Obj.repr(
# 119 "parser.mly"
                              ( Array(_2) )
# 791 "parser.ml"
               : 'arr))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
    ([])
# 797 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
         ( [_1] )
# 804 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arr_elems) in
    Obj.repr(
# 124 "parser.mly"
                         ( _1 :: _3 )
# 812 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                  ( [] )
# 818 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 128 "parser.mly"
         ( _1 )
# 825 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
         ( [_1] )
# 832 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                    ( _3 :: _1 )
# 840 "parser.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
