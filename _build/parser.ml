type token =
  | SEMC
  | DEF
  | NEWLINE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | NEG
  | ASSIGN
  | MODULO
  | EQ
  | NEQ
  | GT
  | GEQ
  | LT
  | LEQ
  | AND
  | OR
  | NOT
  | IF
  | ELIF
  | ELSE
  | WHILE
  | FOR
  | STRING
  | INT
  | FLOAT
  | BOOL
  | VOID
  | RETURN
  | ARRAY
  | RANGE
  | IN
  | COLON
  | COMMA
  | ILIT of (int)
  | FLIT of (float)
  | BLIT of (bool)
  | SLIT of (string)
  | ID of (string)
  | EOF
  | NoOp

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMC *);
  258 (* DEF *);
  259 (* NEWLINE *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* LBRACKET *);
  265 (* RBRACKET *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* NEG *);
  271 (* ASSIGN *);
  272 (* MODULO *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* AND *);
  280 (* OR *);
  281 (* NOT *);
  282 (* IF *);
  283 (* ELIF *);
  284 (* ELSE *);
  285 (* WHILE *);
  286 (* FOR *);
  287 (* STRING *);
  288 (* INT *);
  289 (* FLOAT *);
  290 (* BOOL *);
  291 (* VOID *);
  292 (* RETURN *);
  293 (* ARRAY *);
  294 (* RANGE *);
  295 (* IN *);
  296 (* COLON *);
  297 (* COMMA *);
    0 (* EOF *);
  303 (* NoOp *);
    0|]

let yytransl_block = [|
  298 (* ILIT *);
  299 (* FLIT *);
  300 (* BLIT *);
  301 (* SLIT *);
  302 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\008\000\008\000\005\000\005\000\005\000\005\000\005\000\005\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\007\000\007\000\003\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\012\000\013\000\
\013\000\013\000\011\000\011\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\003\000\004\000\001\000\005\000\007\000\005\000\002\000\
\009\000\000\000\002\000\005\000\001\000\001\000\001\000\001\000\
\001\000\003\000\004\000\004\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\001\000\003\000\000\000\
\001\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\014\000\011\000\013\000\012\000\
\015\000\063\000\000\000\000\000\000\000\000\000\000\000\005\000\
\001\000\003\000\004\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\030\000\032\000\031\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\052\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\038\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\042\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\036\000\000\000\000\000\037\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\006\000\027\000\017\000\000\000\000\000\000\000\
\000\000\018\000\019\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\022\000\000\000\000\000\025\000"

let yydgoto = "\002\000\
\010\000\011\000\104\000\013\000\034\000\038\000\106\000\039\000\
\107\000\108\000\070\000\036\000\042\000\071\000"

let yysindex = "\003\000\
\241\255\000\000\231\254\241\255\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\241\255\241\255\224\254\021\255\000\000\
\000\000\000\000\000\000\000\000\038\255\028\255\166\255\231\254\
\166\255\166\255\166\255\166\255\000\000\000\000\000\000\000\000\
\115\255\253\254\213\000\000\000\074\255\031\255\015\255\021\001\
\141\000\050\255\000\000\000\000\166\255\046\255\166\255\166\255\
\000\000\166\255\166\255\166\255\166\255\166\255\166\255\166\255\
\166\255\166\255\166\255\166\255\166\255\166\255\000\000\063\255\
\231\254\000\000\166\255\000\000\116\001\066\255\034\255\166\255\
\116\001\041\001\061\255\061\255\000\000\000\000\000\000\158\001\
\158\001\125\000\125\000\125\000\125\000\145\001\131\001\078\255\
\097\255\000\000\000\000\166\255\116\001\000\000\150\255\000\000\
\116\001\150\255\150\255\088\255\091\255\095\255\166\255\000\000\
\017\255\093\255\150\255\235\000\000\000\100\255\166\255\166\255\
\166\255\001\001\000\000\000\000\000\000\119\255\061\001\081\001\
\167\000\000\000\000\000\150\255\150\255\166\255\116\255\000\000\
\191\000\150\255\166\255\000\000\101\001\150\255\000\000"

let yyrindex = "\000\000\
\128\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\255\
\000\000\137\255\000\000\000\000\000\000\000\000\000\000\000\000\
\067\255\000\000\000\000\000\000\000\000\000\000\142\255\000\000\
\146\255\000\000\000\000\000\000\152\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\255\000\000\014\255\000\000\154\255\000\000\
\019\255\000\000\212\255\237\255\000\000\000\000\000\000\106\000\
\109\000\006\000\031\000\056\000\081\000\164\255\084\000\000\000\
\000\000\000\000\000\000\000\000\024\255\000\000\153\255\000\000\
\025\255\000\000\153\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\153\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\106\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\092\000\114\000\000\000\255\255\000\000\188\255\000\000\
\015\001\246\255\000\000\000\000\095\000\000\000"

let yytablesize = 692
let yytable = "\014\000\
\048\000\015\000\014\000\001\000\020\000\005\000\006\000\007\000\
\008\000\009\000\014\000\014\000\035\000\021\000\040\000\041\000\
\043\000\044\000\061\000\034\000\048\000\034\000\037\000\034\000\
\035\000\017\000\035\000\034\000\035\000\062\000\110\000\024\000\
\035\000\020\000\069\000\064\000\073\000\074\000\116\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\023\000\020\000\061\000\065\000\
\041\000\020\000\068\000\034\000\072\000\093\000\021\000\089\000\
\035\000\062\000\022\000\033\000\088\000\033\000\091\000\033\000\
\052\000\053\000\092\000\033\000\054\000\033\000\033\000\033\000\
\095\000\097\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\111\000\114\000\105\000\112\000\016\000\
\105\000\105\000\113\000\115\000\119\000\120\000\121\000\018\000\
\019\000\105\000\118\000\033\000\021\000\021\000\020\000\021\000\
\021\000\021\000\012\000\129\000\021\000\012\000\045\000\063\000\
\133\000\123\000\105\000\105\000\046\000\012\000\012\000\002\000\
\105\000\047\000\021\000\021\000\105\000\020\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\096\000\130\000\
\007\000\056\000\008\000\021\000\021\000\021\000\021\000\021\000\
\098\000\025\000\057\000\099\000\059\000\026\000\060\000\026\000\
\027\000\090\000\000\000\000\000\049\000\000\000\049\000\000\000\
\049\000\025\000\000\000\000\000\049\000\026\000\028\000\100\000\
\027\000\000\000\101\000\102\000\005\000\006\000\007\000\008\000\
\009\000\103\000\049\000\049\000\000\000\000\000\028\000\029\000\
\030\000\031\000\032\000\033\000\005\000\006\000\007\000\008\000\
\009\000\000\000\000\000\000\000\049\000\000\000\000\000\029\000\
\030\000\031\000\032\000\033\000\039\000\000\000\039\000\000\000\
\039\000\000\000\000\000\000\000\039\000\039\000\039\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\040\000\000\000\040\000\
\000\000\040\000\003\000\004\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\039\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\045\000\000\000\
\045\000\000\000\045\000\000\000\000\000\000\000\045\000\005\000\
\006\000\007\000\008\000\009\000\000\000\040\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\046\000\
\000\000\046\000\000\000\046\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\047\000\000\000\047\000\000\000\047\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\048\000\000\000\048\000\050\000\048\000\050\000\000\000\
\050\000\048\000\000\000\000\000\050\000\000\000\000\000\000\000\
\047\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\043\000\050\000\043\000\044\000\043\000\044\000\
\109\000\044\000\043\000\000\000\000\000\044\000\000\000\000\000\
\000\000\048\000\043\000\043\000\050\000\044\000\044\000\000\000\
\043\000\043\000\000\000\044\000\044\000\000\000\050\000\051\000\
\052\000\053\000\127\000\128\000\054\000\000\000\000\000\000\000\
\132\000\000\000\043\000\000\000\135\000\044\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\000\000\067\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\131\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\066\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\094\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\124\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\125\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\134\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\050\000\051\000\052\000\
\053\000\000\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\050\000\051\000\052\000\053\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\050\000\051\000\052\000\053\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\050\000\
\051\000\052\000\053\000\000\000\000\000\054\000\000\000\000\000\
\057\000\058\000\059\000\060\000"

let yycheck = "\001\000\
\004\001\003\000\004\000\001\000\037\001\031\001\032\001\033\001\
\034\001\035\001\012\000\013\000\023\000\046\001\025\000\026\000\
\027\000\028\000\005\001\001\001\004\001\003\001\024\000\005\001\
\001\001\000\000\003\001\009\001\005\001\005\001\099\000\004\001\
\009\001\037\001\045\000\005\001\047\000\048\000\107\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\015\001\037\001\041\001\041\001\
\067\000\037\001\009\001\041\001\015\001\072\000\046\001\065\000\
\041\001\041\001\046\001\001\001\006\001\003\001\005\001\005\001\
\012\001\013\001\041\001\009\001\016\001\011\001\012\001\013\001\
\003\001\092\000\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\004\001\103\000\095\000\004\001\004\000\
\098\000\099\000\004\001\007\001\111\000\112\000\113\000\012\000\
\013\000\107\000\007\001\041\001\003\001\004\001\037\001\006\001\
\007\001\008\001\001\000\126\000\011\001\004\000\004\001\046\001\
\131\000\003\001\124\000\125\000\010\001\012\000\013\000\000\000\
\130\000\015\001\025\001\026\001\134\000\037\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\046\001\028\001\
\005\001\009\001\005\001\042\001\043\001\044\001\045\001\046\001\
\003\001\004\001\009\001\006\001\005\001\008\001\005\001\007\001\
\011\001\067\000\255\255\255\255\001\001\255\255\003\001\255\255\
\005\001\004\001\255\255\255\255\009\001\008\001\025\001\026\001\
\011\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\023\001\024\001\255\255\255\255\025\001\042\001\
\043\001\044\001\045\001\046\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\041\001\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\001\001\255\255\003\001\255\255\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\001\001\255\255\003\001\
\255\255\005\001\002\001\003\001\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\041\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\255\255\009\001\031\001\
\032\001\033\001\034\001\035\001\255\255\041\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\001\001\
\255\255\003\001\255\255\005\001\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\041\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\001\001\255\255\003\001\001\001\005\001\003\001\255\255\
\005\001\009\001\255\255\255\255\009\001\255\255\255\255\255\255\
\041\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\001\001\024\001\003\001\001\001\005\001\003\001\
\098\000\005\001\009\001\255\255\255\255\009\001\255\255\255\255\
\255\255\041\001\017\001\018\001\041\001\017\001\018\001\255\255\
\023\001\024\001\255\255\023\001\024\001\255\255\010\001\011\001\
\012\001\013\001\124\000\125\000\016\001\255\255\255\255\255\255\
\130\000\255\255\041\001\255\255\134\000\041\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\041\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001"

let yynames_const = "\
  SEMC\000\
  DEF\000\
  NEWLINE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  NEG\000\
  ASSIGN\000\
  MODULO\000\
  EQ\000\
  NEQ\000\
  GT\000\
  GEQ\000\
  LT\000\
  LEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  RETURN\000\
  ARRAY\000\
  RANGE\000\
  IN\000\
  COLON\000\
  COMMA\000\
  EOF\000\
  NoOp\000\
  "

let yynames_block = "\
  ILIT\000\
  FLIT\000\
  BLIT\000\
  SLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 37 "parser.mly"
            ( _1 )
# 436 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                 ( ([], []) )
# 442 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 42 "parser.mly"
                ( ((_1 :: fst _2), snd _2) )
# 450 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 44 "parser.mly"
               ( (fst _2, (_1 :: snd _2)) )
# 458 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 45 "parser.mly"
                 ( (fst _2, snd _2) )
# 465 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
  (
    {
      rtyp = _2;
      fname = _3;
      formals = _5;
      body = _9;
    }
  )
# 482 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                  ( [] )
# 488 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 60 "parser.mly"
                  ( _1 )
# 495 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                             ( [(_1, _2)] )
# 503 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                             ( (_3, _4) :: _1 )
# 512 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
        ( Int )
# 518 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
         ( Bool )
# 524 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
          ( Float )
# 530 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
           ( String )
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
         ( Void )
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 72 "parser.mly"
              ( ArrayTyp _1 )
# 549 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                 ( Expr _1 )
# 556 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                        ( Return _2 )
# 563 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
                                    ( Block _2 )
# 570 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 79 "parser.mly"
           ( DecAssn _1 )
# 577 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 585 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                         ( If(_3, _5, _7) )
# 594 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                  ( While(_3, _5) )
# 602 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                 ( _2 )
# 609 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                                    ( For(_3, _5, _7, _9) )
# 619 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                   ( [] )
# 625 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 90 "parser.mly"
                   ( _1 :: _2 )
# 633 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                               ( ((_1, _2), _4) )
# 642 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 97 "parser.mly"
                     ( IntLit(_1) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 98 "parser.mly"
                     ( FloatLit(_1) )
# 656 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                     ( StringLit(_1) )
# 663 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 100 "parser.mly"
                     ( BoolLit(_1) )
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                     ( Id(_1) )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Assign(_1, _3) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                          ( Assign(_1, Binop (Id(_1), Add, _4)) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 104 "parser.mly"
                              ( Call(_1, _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                           ( Cast(_1, _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                       ( _2 )
# 716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                   ( Binop (_1, Add, _3) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( Binop (_1, Sub, _3) )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop (_1, Mul, _3) )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop (_1, Div, _3) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                 ( Binop (_1, Equal, _3) )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                  ( Binop (_1, Neq, _3) )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                 ( Binop (_1, Greater, _3) )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                  ( Binop (_1, Geq, _3) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                 ( Binop (_1, Less, _3) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                  ( Binop (_1, Leq, _3) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                  ( Binop (_1, And, _3) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                 ( Binop (_1, Or, _3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                         ( Unop(Neg, _2) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
             ( Unop(Not, _2) )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop (_1, Mod, _3) )
# 834 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr) in
    Obj.repr(
# 122 "parser.mly"
        ( _1 )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arr_elems) in
    Obj.repr(
# 125 "parser.mly"
                              ( Array(_2) )
# 848 "parser.ml"
               : 'arr))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
    ([])
# 854 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
         ( [_1] )
# 861 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arr_elems) in
    Obj.repr(
# 130 "parser.mly"
                         ( _1 :: _3 )
# 869 "parser.ml"
               : 'arr_elems))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                  ( [] )
# 875 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 134 "parser.mly"
         ( _1 )
# 882 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
         ( [_1] )
# 889 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                    ( _3 :: _1 )
# 897 "parser.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
