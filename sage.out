; ModuleID = 'sage'
source_filename = "sage"

@hello = global [6 x i8] c"hello\00"
@t = global i1 true
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@str = private unnamed_addr constant [5 x i8] c"test\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@str.4 = private unnamed_addr constant [6 x i8] c"world\00", align 1
<<<<<<< HEAD
@str.5 = private unnamed_addr constant [2 x i8] c" \00", align 1
=======
>>>>>>> origin/master

declare i32 @printf(i8*, ...)

define void @voidTest() {
entry:
  %test = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 0), i8** %test, align 8
  ret void
}

define i32 @main(i8* %greeting) {
entry:
  %greeting1 = alloca i8*, align 8
  store i8* %greeting, i8** %greeting1, align 8
  %location = alloca i8*, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.4, i32 0, i32 0), i8** %location, align 8
<<<<<<< HEAD
  %hello = load [6 x i8], [6 x i8]* @hello, align 1
  store [6 x i8] %hello, i8** %greeting1, align 1
  %t = load i1, i1* @t, align 1
  br i1 %t, label %then, label %else

then:                                             ; preds = %entry
  %greeting2 = load i8*, i8** %greeting1, align 8
  %location3 = load i8*, i8** %location, align 8
  %test = add i8* %greeting2, %location3
  %test4 = alloca i8*, align 8
  store i8* %test, i8** %test4, align 8
  %ran = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.5, i32 0, i32 0), i8** %ran, align 8
  br label %if_end

else:                                             ; preds = %entry
  br label %if_end

if_end:                                           ; preds = %else, %then
  call void @voidTest()
=======
  call void @voidTest()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i32 3)
>>>>>>> origin/master
  ret i32 0
}
