str
typ string
[]
typ array
=
[
string heyy
string hi
]
array
global assign
[]
typ array
=
[
int 3
int 5
int 139
]
array
global assign
[]
typ array
=
[
bool true
bool false
bool true
]
array
global assign
str
typ string
=
string hello
global assign
=
bool true
global assign
str
typ string
=
string test
global assign
string test
function
str
typ string
str
typ string
=
string world
global assign
=
string hello
function
; ModuleID = 'sage'
source_filename = "sage"

@.str = global [11 x i8] c"aoijfaoiji\00"
@a = global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)
@.str.1 = global [11 x i8] c"aoijfaoiji\00"
@b = global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)
@.str.2 = global [11 x i8] c"aoijfaoiji\00"
@c = global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)
@.str.3 = global [6 x i8] c"hello\00"
@hello = global i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)
@t = global i1 true
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@str = private unnamed_addr constant [5 x i8] c"test\00", align 1
@str.5 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@str.8 = private unnamed_addr constant [6 x i8] c"world\00", align 1
@str.9 = private unnamed_addr constant [6 x i8] c"hello\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @concat(i8*, i8*)

declare i32 @len(i8*)

declare i32 @indexOf(i8*, i8*)

define void @voidTest() {
entry:
  %test = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str, i32 0, i32 0), i8** %test, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.5, i32 0, i32 0))
  ret void
}

define i32 @main(i8* %greeting) {
entry:
  %greeting1 = alloca i8*, align 8
  store i8* %greeting, i8** %greeting1, align 8
  %location = alloca i8*, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.8, i32 0, i32 0), i8** %location, align 8
  %hello = load i8*, i8** @hello, align 8
  store i8* %hello, i8** %greeting1, align 8
  call void @voidTest()
  %location2 = load i8*, i8** %location, align 8
  %concat = call i8* @concat(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.9, i32 0, i32 0), i8* %location2)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.7, i32 0, i32 0), i8* %concat)
  ret i32 0
}
